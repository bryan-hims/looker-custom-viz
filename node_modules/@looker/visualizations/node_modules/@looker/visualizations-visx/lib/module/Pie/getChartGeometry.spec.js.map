{"version":3,"file":"getChartGeometry.spec.js","names":["getChartGeometry","describe","legendType","width","height","labelWidth","test","canvasH","canvasW","expect","toEqual","pieCenterX","pieCenterY","outerRadius","toMatchInlineSnapshot"],"sources":["../../../src/Pie/getChartGeometry.spec.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport { getChartGeometry } from './getChartGeometry'\n\ndescribe('getChartGeometry', () => {\n  describe('legend type === legend', () => {\n    const legendType = 'legend'\n    const width = 100\n    const height = 500\n    const labelWidth = 50\n\n    test('defines a square based on the larger width or height prop', () => {\n      const { canvasH, canvasW } = getChartGeometry({\n        legendType,\n        width,\n        height,\n        labelWidth,\n      })\n      expect(canvasW).toEqual(height)\n      expect(canvasH).toEqual(height)\n    })\n    test('defines an appropriate pie radius and center position', () => {\n      const { pieCenterX, pieCenterY, outerRadius } = getChartGeometry({\n        legendType,\n        width,\n        height,\n        labelWidth,\n      })\n\n      expect(pieCenterX).toMatchInlineSnapshot(`242.5`)\n      expect(pieCenterY).toMatchInlineSnapshot(`242.5`)\n      expect(outerRadius).toMatchInlineSnapshot(`227.5`)\n    })\n  })\n\n  describe('legend type === labels', () => {\n    const legendType = 'labels'\n    const width = 100\n    const height = 500\n    const labelWidth = 100\n    test('defines a rectangle based on the larger width or height prop minus labelWidth', () => {\n      const { canvasH, canvasW } = getChartGeometry({\n        legendType,\n        width,\n        height,\n        labelWidth,\n      })\n      expect(canvasW).toEqual(height)\n      expect(canvasH).toMatchInlineSnapshot(`363.5783396384056`)\n    })\n    test('defines an appropriate pie radius and center position', () => {\n      const { pieCenterX, pieCenterY, outerRadius } = getChartGeometry({\n        legendType,\n        width,\n        height,\n        labelWidth,\n      })\n\n      expect(pieCenterX).toMatchInlineSnapshot(`242.5`)\n      expect(pieCenterY).toMatchInlineSnapshot(`174.2891698192028`)\n      expect(outerRadius).toMatchInlineSnapshot(`91.07833963840565`)\n    })\n  })\n})\n"],"mappings":";;AAKA,SAASA,gBAAgB,QAAQ,oBAAoB;AAErDC,QAAQ,CAAC,kBAAkB,EAAE,MAAM;EACjCA,QAAQ,CAAC,wBAAwB,EAAE,MAAM;IACvC,MAAMC,UAAU,GAAG,QAAQ;IAC3B,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,UAAU,GAAG,EAAE;IAErBC,IAAI,CAAC,2DAA2D,EAAE,MAAM;MACtE,MAAM;QAAEC,OAAO;QAAEC;MAAQ,CAAC,GAAGR,gBAAgB,CAAC;QAC5CE,UAAU;QACVC,KAAK;QACLC,MAAM;QACNC;MACF,CAAC,CAAC;MACFI,MAAM,CAACD,OAAO,CAAC,CAACE,OAAO,CAACN,MAAM,CAAC;MAC/BK,MAAM,CAACF,OAAO,CAAC,CAACG,OAAO,CAACN,MAAM,CAAC;IACjC,CAAC,CAAC;IACFE,IAAI,CAAC,uDAAuD,EAAE,MAAM;MAClE,MAAM;QAAEK,UAAU;QAAEC,UAAU;QAAEC;MAAY,CAAC,GAAGb,gBAAgB,CAAC;QAC/DE,UAAU;QACVC,KAAK;QACLC,MAAM;QACNC;MACF,CAAC,CAAC;MAEFI,MAAM,CAACE,UAAU,CAAC,CAACG,qBAAqB,CAAE,OAAM,CAAC;MACjDL,MAAM,CAACG,UAAU,CAAC,CAACE,qBAAqB,CAAE,OAAM,CAAC;MACjDL,MAAM,CAACI,WAAW,CAAC,CAACC,qBAAqB,CAAE,OAAM,CAAC;IACpD,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFb,QAAQ,CAAC,wBAAwB,EAAE,MAAM;IACvC,MAAMC,UAAU,GAAG,QAAQ;IAC3B,MAAMC,KAAK,GAAG,GAAG;IACjB,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,UAAU,GAAG,GAAG;IACtBC,IAAI,CAAC,+EAA+E,EAAE,MAAM;MAC1F,MAAM;QAAEC,OAAO;QAAEC;MAAQ,CAAC,GAAGR,gBAAgB,CAAC;QAC5CE,UAAU;QACVC,KAAK;QACLC,MAAM;QACNC;MACF,CAAC,CAAC;MACFI,MAAM,CAACD,OAAO,CAAC,CAACE,OAAO,CAACN,MAAM,CAAC;MAC/BK,MAAM,CAACF,OAAO,CAAC,CAACO,qBAAqB,CAAE,mBAAkB,CAAC;IAC5D,CAAC,CAAC;IACFR,IAAI,CAAC,uDAAuD,EAAE,MAAM;MAClE,MAAM;QAAEK,UAAU;QAAEC,UAAU;QAAEC;MAAY,CAAC,GAAGb,gBAAgB,CAAC;QAC/DE,UAAU;QACVC,KAAK;QACLC,MAAM;QACNC;MACF,CAAC,CAAC;MAEFI,MAAM,CAACE,UAAU,CAAC,CAACG,qBAAqB,CAAE,OAAM,CAAC;MACjDL,MAAM,CAACG,UAAU,CAAC,CAACE,qBAAqB,CAAE,mBAAkB,CAAC;MAC7DL,MAAM,CAACI,WAAW,CAAC,CAACC,qBAAqB,CAAE,mBAAkB,CAAC;IAChE,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC"}