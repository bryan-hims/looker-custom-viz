{"version":3,"file":"getChartGeometry.js","names":["getChartGeometry","width","height","labelWidth","legendType","minChartSize","maxConnectorLength","getConnectorLength","maxDimension","Math","max","hoverMargin","ceil","PIE_SLICE_ZOOM","canvasCenter","padding","outerRadius","canvasW","canvasH","pieCenterX","pieCenterY"],"sources":["../../../src/Pie/getChartGeometry.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type { LegendTypes } from '@looker/visualizations-adapters'\nimport { PIE_SLICE_ZOOM } from './pieConstants'\nimport { getConnectorLength } from './getConnectorLength'\n\ntype GetChartGeometryArgs = {\n  /**\n   *  width passed to the Pie component\n   */\n  width: number\n  /**\n   * height passed to the Pie component\n   */\n  height: number\n  /**\n   * labelWidth white space set aside within svg to render labels\n   */\n  labelWidth: number\n  /**\n   * legendType 'labels' | 'legend'\n   */\n  legendType?: LegendTypes\n}\n\n/**\n * Helper function calculates the values required to render the pie chart\n * SVG element given the provided data and config\n *\n * @returns\n *   canvasW: canvas width;\n *   canvasH: canvas height;\n *   pieCenterX: coordinate for the center point of the pie;\n *   pieCenterY: coordinate for the center point of the pie;\n *   outerRadius: radius of the pie given the available space within the canvas;\n *\n */\n\nexport const getChartGeometry = ({\n  width,\n  height,\n  labelWidth,\n  legendType = 'legend',\n}: GetChartGeometryArgs) => {\n  const minChartSize = legendType === 'legend' ? 50 : 350\n\n  // get the connector length at the top position (value for outer radius argument doesn't matter)\n  const maxConnectorLength = getConnectorLength(0, 1) * 2\n\n  // define a square based on whatever is greater between width & height\n  const maxDimension = Math.max(width, height, minChartSize)\n\n  // define how much of the pie element to preserve for \"pizza crust\" hover effect\n  const hoverMargin = Math.ceil(maxDimension - maxDimension / PIE_SLICE_ZOOM)\n\n  // middle point for pie\n  const canvasCenter = (maxDimension - hoverMargin) / 2\n\n  // when legend type is \"labels\", set aside enough white space to render label\n  // content within the svg area\n  const padding =\n    legendType === 'labels' ? Math.max(labelWidth, maxConnectorLength) : 0\n\n  // size the pie chart based on canvas size, minus the required white space\n  const outerRadius = canvasCenter - hoverMargin - padding\n\n  return {\n    canvasW: maxDimension,\n    canvasH: maxDimension - padding, // less vertical space required when legend type is \"labels\"\n    pieCenterX: canvasCenter,\n    pieCenterY: canvasCenter - padding / 2,\n    outerRadius,\n  }\n}\n"],"mappings":";;;;;;AAMA;AACA;;AAkCO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAgB,OAKD;EAAA,IAJ1BC,KAAK,QAALA,KAAK;IACLC,MAAM,QAANA,MAAM;IACNC,UAAU,QAAVA,UAAU;IAAA,uBACVC,UAAU;IAAVA,UAAU,gCAAG,QAAQ;EAErB,IAAMC,YAAY,GAAGD,UAAU,KAAK,QAAQ,GAAG,EAAE,GAAG,GAAG;;EAGvD,IAAME,kBAAkB,GAAG,IAAAC,sCAAkB,EAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;;EAGvD,IAAMC,YAAY,GAAGC,IAAI,CAACC,GAAG,CAACT,KAAK,EAAEC,MAAM,EAAEG,YAAY,CAAC;;EAG1D,IAAMM,WAAW,GAAGF,IAAI,CAACG,IAAI,CAACJ,YAAY,GAAGA,YAAY,GAAGK,4BAAc,CAAC;;EAG3E,IAAMC,YAAY,GAAG,CAACN,YAAY,GAAGG,WAAW,IAAI,CAAC;;EAIrD,IAAMI,OAAO,GACXX,UAAU,KAAK,QAAQ,GAAGK,IAAI,CAACC,GAAG,CAACP,UAAU,EAAEG,kBAAkB,CAAC,GAAG,CAAC;;EAGxE,IAAMU,WAAW,GAAGF,YAAY,GAAGH,WAAW,GAAGI,OAAO;EAExD,OAAO;IACLE,OAAO,EAAET,YAAY;IACrBU,OAAO,EAAEV,YAAY,GAAGO,OAAO;IAC/BI,UAAU,EAAEL,YAAY;IACxBM,UAAU,EAAEN,YAAY,GAAGC,OAAO,GAAG,CAAC;IACtCC,WAAW,EAAXA;EACF,CAAC;AACH,CAAC;AAAA"}