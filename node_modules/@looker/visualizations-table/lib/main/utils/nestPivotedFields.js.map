{"version":3,"file":"nestPivotedFields.js","names":["nestPivotedFields","pivotList","pivotIndex","nestedPivots","pivotValues","columnHelper","createColumnHelper","pivot","id","name","data","header","labels","replace","label","group","columns","Array","isArray"],"sources":["../../../src/utils/nestPivotedFields.ts"],"sourcesContent":["/**\n * Copyright (c) 2023 Google LLC\n * SPDX-License-Identifier: MIT\n */\n\nimport type {\n  SDKRecord,\n  Fields,\n  PivotMetadata,\n} from '@looker/visualizations-adapters'\nimport type { ColumnDef } from '@tanstack/table-core'\nimport { createColumnHelper } from '@tanstack/react-table'\n\ntype NestPivotedFieldsProps = {\n  pivotList: Fields['pivots']\n  pivotIndex: number\n  nestedPivots: ColumnDef<SDKRecord> | ColumnDef<SDKRecord>[]\n  pivotValues?: PivotMetadata\n}\n\n/**\n * Recursively nests a list of columns inside columnHelper.group,\n * each recursive level representing a pivoted column.\n * @param {Object} columnGroups - all the metadata required to nest columns nested columnHelper group\n * @param {Array} columnGroups.pivotList - fields.pivots sdk response\n * @param {number} columnGroups.pivotIndex - which pivot from pivotList to format\n * @param {Object} columnGroups.nestedPivots - the accumulated nesting of columnHelper.group functions\n * @param {Object} columnGroups.pivotValues - optional additional pivot header values, used with grouped measures\n * @returns Column groups for use with Tanstack Table\n */\nexport const nestPivotedFields = ({\n  pivotList = [],\n  pivotIndex,\n  nestedPivots,\n  pivotValues,\n}: NestPivotedFieldsProps): ColumnDef<SDKRecord> => {\n  const columnHelper = createColumnHelper<SDKRecord>()\n\n  const pivot = pivotList[pivotIndex]\n  if (pivot) {\n    const { id, header } = pivotValues\n      ? {\n          id: `${pivot.name} - ${pivotValues?.data[pivot.name]}`,\n          // `replace` call use to strip HTML markup that came from the sdk response\n          header: pivotValues?.labels[pivot.name]?.replace(/(<([^>]+)>)/gi, ''),\n        }\n      : { id: pivot.name, header: pivot.label }\n\n    return nestPivotedFields({\n      pivotList,\n      pivotIndex: pivotIndex + 1,\n      nestedPivots: columnHelper.group({\n        id,\n        header,\n        columns: [\n          ...(Array.isArray(nestedPivots) ? nestedPivots : [nestedPivots]),\n        ],\n      }),\n      pivotValues,\n    })\n  }\n\n  // Handles the edge case where an array of measure columns is passed\n  // to this function, but the pivot list is empty. Should never happen,\n  // but case needs to be accounted for per type definitions.\n  if (Array.isArray(nestedPivots)) {\n    return columnHelper.group({\n      id: `pivot-field-${pivotIndex}`,\n      columns: nestedPivots,\n    })\n  }\n\n  return nestedPivots\n}\n"],"mappings":";;;;;;;;AAWA;;AAmBO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAiB,OAKsB;EAAA,0BAJlDC,SAAS;IAATA,SAAS,+BAAG,EAAE;IACdC,UAAU,QAAVA,UAAU;IACVC,YAAY,QAAZA,YAAY;IACZC,WAAW,QAAXA,WAAW;EAEX,IAAMC,YAAY,GAAG,IAAAC,8BAAkB,GAAa;EAEpD,IAAMC,KAAK,GAAGN,SAAS,CAACC,UAAU,CAAC;EACnC,IAAIK,KAAK,EAAE;IAAA;IACT,YAAuBH,WAAW,GAC9B;QACEI,EAAE,YAAKD,KAAK,CAACE,IAAI,gBAAML,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEM,IAAI,CAACH,KAAK,CAACE,IAAI,CAAC,CAAE;QAEtDE,MAAM,EAAEP,WAAW,aAAXA,WAAW,gDAAXA,WAAW,CAAEQ,MAAM,CAACL,KAAK,CAACE,IAAI,CAAC,0DAA/B,sBAAiCI,OAAO,CAAC,eAAe,EAAE,EAAE;MACtE,CAAC,GACD;QAAEL,EAAE,EAAED,KAAK,CAACE,IAAI;QAAEE,MAAM,EAAEJ,KAAK,CAACO;MAAM,CAAC;MANnCN,EAAE,SAAFA,EAAE;MAAEG,MAAM,SAANA,MAAM;IAQlB,OAAOX,iBAAiB,CAAC;MACvBC,SAAS,EAATA,SAAS;MACTC,UAAU,EAAEA,UAAU,GAAG,CAAC;MAC1BC,YAAY,EAAEE,YAAY,CAACU,KAAK,CAAC;QAC/BP,EAAE,EAAFA,EAAE;QACFG,MAAM,EAANA,MAAM;QACNK,OAAO,sCACDC,KAAK,CAACC,OAAO,CAACf,YAAY,CAAC,GAAGA,YAAY,GAAG,CAACA,YAAY,CAAC;MAEnE,CAAC,CAAC;MACFC,WAAW,EAAXA;IACF,CAAC,CAAC;EACJ;;EAKA,IAAIa,KAAK,CAACC,OAAO,CAACf,YAAY,CAAC,EAAE;IAC/B,OAAOE,YAAY,CAACU,KAAK,CAAC;MACxBP,EAAE,wBAAiBN,UAAU,CAAE;MAC/Bc,OAAO,EAAEb;IACX,CAAC,CAAC;EACJ;EAEA,OAAOA,YAAY;AACrB,CAAC;AAAA"}