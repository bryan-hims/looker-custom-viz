{"version":3,"file":"index.spec.js","names":["React","mockTableConfig","mockFields","mockPivotedFields","mockData","mockTotals","mockPivotedData","mockPivotGender","renderWithTheme","screen","within","fireEvent","Table","getTextContent","cells","map","c","textContent","it","show_row_numbers","column_order","headers","getAllByTestId","expect","toEqual","getAllByRole","toHaveTextContent","highestOrderCount","Infinity","lowestOrderCount","topRow","sortButton","getByText","closest","click","newTopRow","ariaSortValue","el","attributes","getNamedItem","value","slice","sortButtons","h","getByRole","hidden","shiftKey","show_totals","footerRow","length","configCopy","series","value_format","bodyRow","tHead","headerRows"],"sources":["../../../src/Table/index.spec.tsx"],"sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2022 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React from 'react'\nimport {\n  mockTableConfig,\n  mockFields,\n  mockPivotedFields,\n  mockData,\n  mockTotals,\n  mockPivotedData,\n  mockPivotGender,\n} from '@looker/visualizations-adapters'\nimport { renderWithTheme } from '@looker/components-test-utils'\nimport { screen, within, fireEvent } from '@testing-library/react'\nimport { Table } from './'\n\n// return an array of strings from an array of html elements\nconst getTextContent = (cells: HTMLElement[]) => cells.map(c => c.textContent)\n\nit('organizes table columns as specified by config.column_order', () => {\n  renderWithTheme(\n    <Table\n      config={{\n        ...mockTableConfig,\n        show_row_numbers: false,\n        column_order: [\n          'orders.count',\n          'orders.created_date',\n          'orders.average_total_amount_of_order_usd',\n          'users.state',\n        ],\n      }}\n      fields={mockFields}\n      data={mockData}\n    />\n  )\n\n  const headers = screen.getAllByTestId('columnheader-label')\n\n  expect(getTextContent(headers)).toEqual([\n    'Orders Count',\n    'Orders Created Date',\n    'Orders Average Total Amount of Order USD',\n    'Users State',\n  ])\n})\n\nit('renders row numbers when config.show_row_numbers is true', () => {\n  renderWithTheme(\n    <Table\n      config={{ ...mockTableConfig, show_row_numbers: true }}\n      fields={mockFields}\n      data={mockData}\n    />\n  )\n\n  // assert that the first visible table cell rendered is the row index (1)\n  expect(screen.getAllByRole('cell')[1]).toHaveTextContent('1')\n})\n\nit('hides row numbers when config.show_row_numbers is false', () => {\n  renderWithTheme(\n    <Table\n      config={{ ...mockTableConfig, show_row_numbers: false }}\n      fields={mockFields}\n      data={mockData}\n    />\n  )\n\n  // assert that the first visible table cell rendered is a query response value\n  expect(screen.getAllByRole('cell')[1]).toHaveTextContent('2019-12-22')\n})\n\nit('sorts table columns', () => {\n  const highestOrderCount = {\n    'orders.count': Infinity,\n    'orders.average_total_amount_of_order_usd': Infinity,\n    'orders.created_date': '2012-12-12',\n    'users.state': 'Oregon',\n  }\n\n  const lowestOrderCount = {\n    'orders.count': -Infinity,\n    'orders.average_total_amount_of_order_usd': -Infinity,\n    'orders.created_date': '2022-09-01',\n    'users.state': 'Oregon',\n  }\n\n  renderWithTheme(\n    <Table\n      config={{ ...mockTableConfig, show_row_numbers: false }}\n      fields={mockFields}\n      data={[...mockData, lowestOrderCount, highestOrderCount]}\n    />\n  )\n\n  // mock fields sorted by 'orders.count' by default\n  const topRow = screen.getAllByRole('row')[1]\n  expect(getTextContent(within(topRow).getAllByRole('cell'))).toEqual([\n    '',\n    '2012-12-12',\n    'Oregon',\n    'Infinity',\n    'Infinity',\n  ])\n\n  // click sort button to switch direction (render lowest-to-highest order counts)\n  const sortButton = screen.getByText('Sort ascending').closest('button')\n  fireEvent.click(sortButton as Element)\n\n  const newTopRow = screen.getAllByRole('row')[1]\n  expect(getTextContent(within(newTopRow).getAllByRole('cell'))).toEqual([\n    '',\n    '2022-09-01',\n    'Oregon',\n    '-Infinity',\n    '-Infinity',\n  ])\n})\n\nit('sorts multiple table columns when shift key is held down', () => {\n  const ariaSortValue = (el: Element) =>\n    el.attributes.getNamedItem('aria-sort')?.value\n\n  renderWithTheme(\n    <Table\n      config={{ ...mockTableConfig, show_row_numbers: false }}\n      fields={mockFields}\n      data={mockData}\n    />\n  )\n\n  // omit first and last elements which will always be the virtual scrolling spacers\n  const headers = screen.getAllByRole('columnheader').slice(1, -1)\n\n  const sortButtons = headers.map(h =>\n    within(h).getByRole('button', { hidden: true })\n  )\n\n  // default: neither first or second columns are sorted\n  expect(ariaSortValue(headers[0])).toEqual('none')\n  expect(ariaSortValue(headers[1])).toEqual('none')\n\n  // sort first column\n  fireEvent.click(sortButtons[0])\n\n  expect(ariaSortValue(headers[0])).toEqual('descending')\n  expect(ariaSortValue(headers[1])).toEqual('none')\n\n  // sort first AND second columns\n  fireEvent.click(sortButtons[1], { shiftKey: true })\n\n  expect(ariaSortValue(headers[0])).toEqual('descending')\n  expect(ariaSortValue(headers[1])).toEqual('descending')\n\n  // reverse first column while maintaining second column sort state\n  fireEvent.click(sortButtons[0], { shiftKey: true })\n\n  expect(ariaSortValue(headers[0])).toEqual('ascending')\n  expect(ariaSortValue(headers[1])).toEqual('descending')\n})\n\nit('renders totals when config.show_totals is true', () => {\n  renderWithTheme(\n    <Table\n      config={{ ...mockTableConfig, show_totals: true }}\n      fields={mockFields}\n      data={mockData}\n      totals={mockTotals}\n    />\n  )\n  const footerRow =\n    screen.getAllByRole('row')[screen.getAllByRole('row').length - 1]\n  expect(\n    getTextContent(within(footerRow).getAllByRole('columnheader'))\n  ).toEqual(['Totals', '', '5689', '2245'])\n})\n\nit('renders value format on body', () => {\n  const configCopy = { ...mockTableConfig }\n  configCopy.series = [\n    { value_format: '$#,##0.00' },\n    { value_format: '0,0.[00]' },\n  ]\n  renderWithTheme(\n    <Table\n      config={{ ...configCopy, show_totals: true }}\n      fields={mockFields}\n      data={mockData}\n      totals={mockTotals}\n    />\n  )\n  const bodyRow =\n    screen.getAllByRole('row')[screen.getAllByRole('row').length - 2]\n  expect(getTextContent(within(bodyRow).getAllByRole('cell'))).toEqual([\n    '',\n    '2019-12-19',\n    'Oregon',\n    '$87.00',\n    '88',\n  ])\n})\n\nit('renders value format on totals', () => {\n  const configCopy = { ...mockTableConfig }\n  configCopy.series = [\n    { value_format: '$#,##0.00' },\n    { value_format: '0,0.[00]' },\n  ]\n  renderWithTheme(\n    <Table\n      config={{ ...configCopy, show_totals: true }}\n      fields={mockFields}\n      data={mockData}\n      totals={mockTotals}\n    />\n  )\n  const footerRow =\n    screen.getAllByRole('row')[screen.getAllByRole('row').length - 1]\n  expect(\n    getTextContent(within(footerRow).getAllByRole('columnheader'))\n  ).toEqual(['Totals', '', '$5,689.00', '2,245'])\n})\n\nit('renders multiple table head rows for pivoted queries', () => {\n  renderWithTheme(\n    <Table\n      config={mockTableConfig}\n      fields={mockPivotedFields}\n      data={mockPivotedData}\n      pivots={mockPivotGender}\n    />\n  )\n\n  const tHead = screen.getAllByRole('rowgroup')[0]\n  const headerRows = within(tHead).getAllByRole('row')\n\n  // two header rows rendered in total\n  expect(headerRows.length).toEqual(2)\n\n  // first header row is the pivot labels\n  expect(\n    getTextContent(within(headerRows[0]).getAllByRole('columnheader'))\n  ).toEqual(['', 'Users Gender', 'f', 'm', 'male', ''])\n\n  // second header row is the column labels\n  expect(\n    getTextContent(within(headerRows[1]).getAllByTestId('columnheader-label'))\n  ).toEqual(['Users City', 'Orders Count', 'Orders Count', 'Orders Count'])\n})\n"],"mappings":"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"}